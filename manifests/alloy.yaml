---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
data:
  config.alloy: |
    discovery.kubernetes "pods" {
      role = "pod"
    }

    discovery.relabel "all_pods" {
      targets = discovery.kubernetes.pods.targets

      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_name"]
        separator     = "/"
        target_label  = "job"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__meta_kubernetes_pod_name"]
        regex         = "^;*([^;]+)(;.*)?$"
        target_label  = "app"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        separator     = "/"
        regex         = "(.+)"
        replacement   = "/var/log/pods/*${1}/*.log"
        target_label  = "__path__"
      }
    }

    loki.source.kubernetes "pods" {
      targets    = discovery.relabel.all_pods.output
      forward_to = [loki.process.docker_logs.receiver]
    }

    loki.process "docker_logs" {
      // Parse Docker container logs
      stage.docker {}

      forward_to = [loki.write.loki.receiver]
    }

    // Write logs to Loki
    loki.write "loki" {
      endpoint {
        url = "http://lgtm-loki-gateway.monitoring:80/loki/api/v1/push"
      }
    }

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: alloy
  labels:
    app: alloy
spec:
  selector:
    matchLabels:
      app: alloy
  template:
    metadata:
      labels:
        app: alloy
    spec:
      serviceAccountName: alloy
      containers:
      - name: alloy
        image: grafana/alloy:latest
        args:
          - "run"
          - "/etc/alloy/config.alloy"
          - "--server.http.listen-addr=0.0.0.0:12345"
        ports:
        - containerPort: 12345
          name: http
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: config
          mountPath: /etc/alloy
        - name: logs
          mountPath: /var/log
          readOnly: true
        - name: docker-logs
          mountPath: /var/lib/docker
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: config
        configMap:
          name: alloy-config
      - name: logs
        hostPath:
          path: /var/log
      - name: docker-logs
        hostPath:
          path: /var/lib/docker

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy
rules:
- apiGroups: [""]
  resources:
    - nodes
    - services
    - pods
    - pods/log
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy
subjects:
- kind: ServiceAccount
  name: alloy
  namespace: default

---
apiVersion: v1
kind: Service
metadata:
  name: alloy
  labels:
    app: alloy
spec:
  selector:
    app: alloy
  ports:
  - port: 12345
    targetPort: 12345
    name: http